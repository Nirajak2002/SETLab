def gcd(A, M):
    if A == 0:
        return M
    return gcd(M % A, A)


def modInverse(A, M):
    m = M
    y = 0
    x = 1
    if (M == 1):
        return 0
    while (A > 1):
        q = A // M
        t = M
        M = A % M
        A = t
        t = y
        y = x - q * y
        x = t
    if (x < 0):
        x = x + m
    return x

# A = 6432428153848273761187304470153420054103716013509288496568501453281514041701282284606029140622859329
# X = 5321149850446803321583932991533033728915345891167811342067853760517397299779591467187490852174391903
# M = 34227914108859549112090175664574780960566395810040863485466385078705233752161570075653022955413546694845003472994702248311299420878539041547175332311829055758977182751275432094586376377033351685613086


# A * X = 1 mod M
A = int(input("Enter A: "))
M = int(input("Enter M: "))
print("gcd(", A, ",", M, ") = ", gcd(A, M))
print("Modular multiplicative inverse =", modInverse(A, M))
